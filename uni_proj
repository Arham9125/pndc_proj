import socket
import hashlib
import threading

usr_data = ""
alt = 0
clusters = 0
ansrs = []  # To hold responses from clients

def handle(client_socket, arr, start, end, id):
    data = f"{usr_data.upper()},"
    
    # Generate data to send based on the range
    for i in range(start, end + 1):
        data += f"{arr[i]},"
    
    data = data.rstrip(',')
    print(f"{id} sending: {data}")
    
    # Send data to client
    client_socket.sendall(data.encode())
    
    # Receive response from client
    s2 = client_socket.recv(1024).decode()
    print(f"{id} received: {s2}")
    
    ansrs[id] = s2
    client_socket.close()

def monitor():
    while True:
        count = clusters
        for i in range(len(ansrs)):
            if ansrs[i] == "":
                count -= 1
            else:
                if ansrs[i] != "none":
                    print(ansrs[i])
                    return
        if count == 0:
            break

def start_server():
    global usr_data, alt, clusters
    
    print("Server Started.......")
    print("___________")
    
    usr_data = input("Enter Hash, you want to break\n")
    alt = int(input("Enter Number of Brute-force alterations\n"))
    clusters = int(input("Enter Number of Clusters\n"))
    
    if alt % clusters == 0:
        # Create listener
        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_socket.bind(("127.0.0.1", 15000))
        server_socket.listen(5)
        
        # Array of alterations
        arr = list(range(alt))
        dist = alt // clusters
        
        # Initialize the answer array
        global ansrs
        ansrs = [""] * clusters
        
        # Distribute work to clients
        for n2 in range(clusters):
            start = n2 * dist
            end = (n2 + 1) * dist - 1
            client_socket, _ = server_socket.accept()
            threading.Thread(target=handle, args=(client_socket, arr, start, end, n2)).start()
        
        # Monitor responses
        monitor()
    else:
        print("Please enter even values for alterations and clusters.")

if __name__ == "__main__":
    start_server()


import socket
import hashlib

def main():
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect(("127.0.0.1", 15000))
    
    # Receive data from server
    data = client_socket.recv(1024).decode()
    hold = data.split(",")
    
    actualstring = hold[0]
    count = 0
    breaker = "none"
    
    # Loop through the list of possible values and check hashes
    for i in range(1, len(hold)):
        count += 1
        hashval = hashlib.sha512(hold[i].encode()).hexdigest().upper()
        
        if actualstring == hashval:
            breaker = f"{actualstring} ===>> {hold[i]}"
            break
        
        print(f"{(count / len(hold)) * 100} %\n")
    
    # Send result back to the server
    client_socket.sendall(breaker.encode())
    client_socket.close()

if __name__ == "__main__":
    main()
